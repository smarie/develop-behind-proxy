{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"develop-behind-proxy","text":"<p>Some configuration tricks for developers located behind a corporate proxy. Most of these have been tested under Windows behind a specific NTLM proxy (Zscaler), so it is far from being exhaustive! Linux testers, and other proxy users, welcome ;) </p> <p>This documentation is made of three parts:</p> <ul> <li>In HTTP/HTTPs Proxy basics we remind the concept of HTTP/HTTPs proxy</li> <li>In Know your proxy we go through all the information that you have to collect and explain how to retrieve the proxy's root SSL certificate if needed.</li> <li>In Configure your applications we explain for a list of popular applications, how to configure it to work with your proxy.</li> <li>In Switching tools we provide a list of tools to switch between different network environments</li> </ul>"},{"location":"#additional-readings","title":"Additional readings","text":"<p>You may find the following articles interesting:</p> <ul> <li>https://support.ssl.com/Knowledgebase/Article/View/19/0/der-vs-crt-vs-cer-vs-pem-certificates-and-how-to-convert-them</li> <li>http://devangst.com/death-by-proxy-tips-for-developing-behind-proxy/</li> <li>https://mdeinum.wordpress.com/2013/07/01/yeoman-behind-a-corporate-proxy/ </li> </ul>"},{"location":"basics/","title":"HTTP/HTTPs Proxy basics","text":"<p>An HTTP/HTTPS proxy (such as ZScaler) sits between your computer and the internet. Its role is to check all outbound connections, possibly log them and even forbid some of them (+ other features depending on the proxy).</p> <p></p> <p>Therefore, all your applications that need to connect to the internet have to be informed that they need to <code>CONNECT</code> to that proxy first. For this, you will first have to collect information about your proxy, as explained here.</p>"},{"location":"configure_apps/","title":"Configuring each application to use the proxy","text":"<p>In the previous sections you managed to collect information about your proxy. Here is what you should have collected so far:</p> <ul> <li>the proxy's host and port for HTTP, referred to as <code>&lt;http_host&gt;</code> and <code>&lt;http_port&gt;</code> below (e.g. <code>proxyhost</code>, <code>8080</code>)</li> <li>the proxy's host and port for HTTPS, referred to as <code>&lt;https_host&gt;</code> and <code>&lt;https_port&gt;</code> below (e.g. <code>proxyhost</code>, <code>4443</code>)</li> <li>the list of hosts that do not require a proxy, referred to as <code>&lt;no_proxy_hosts&gt;</code> below (e.g. <code>localhost,127.0.0.1,mylocalserver</code>)</li> <li>(optional) your credentials (<code>&lt;user&gt;</code> and <code>&lt;pwd&gt;</code>). We don't recommend that you use these.</li> </ul> <p>If your IT department provides an auto-configuration script, a <code>.pac</code> file.</p> <p>And, if your proxy changes the certification chain:</p> <ul> <li>a <code>my_proxys_root_ca_cert.crt</code> file containing your proxy's certificate only. This will be referred to as <code>&lt;path_to_root_ca_cert.crt&gt;</code> below</li> <li>a <code>160117-certifi-ca-bundle-with-proxy.pem</code> file containing a bundle of trusted certificates, as well as your proxy's. This will be referred to as <code>&lt;path_to_ca_bundle.pem&gt;</code> below</li> </ul> <p>This chapter helps you to configure various applications to use your proxy. Remember that the proxy prevents any application to access the internet, so any time an application does not work and you think it requires internet access, this might be the cause. If you don't find your tool in the list, please feel free to contribute with a pull request on the github project.</p>"},{"location":"configure_apps/#common-settings-for-several-unixlinux-inspired-tools","title":"Common settings for several Unix/Linux inspired tools","text":"<p><code>curl</code>, <code>git</code>, <code>conda</code>, <code>pip</code>, <code>NodeJS</code>  and many other tools rely on the following standard UNIX/Linux environment variables that you should define in your OS (also on windows):</p> <pre><code>http_proxy      http://[&lt;user&gt;:&lt;pwd&gt;@]&lt;http_host&gt;:&lt;http_port&gt;  \nhttps_proxy     http://[&lt;user&gt;:&lt;pwd&gt;@]&lt;https_host&gt;:&lt;https_port&gt;\nno_proxy        &lt;no_proxy_hosts&gt;\ncurl_ca_bundle  &lt;path_to_ca_bundle.pem&gt;\n</code></pre> <p>Important note: storing the list of trusted certificates in a raw file such as here <code>&lt;path_to_ca_bundle.pem&gt;</code> is still a bit unsecure, unless you make sure that the file can not be corrupted by a third party (at least you may wish to ensure that only administrators can modify this file). But this is far more secure than disabling SSL certificate verification in your application :)</p> <p>To set these environment variables in Linux you can either use the user-specific ~/.bashrc file or configure them in the global environment. However, this depends on the distribution you are running:</p> <ul> <li>Ubuntu: Create or append to <code>/etc/environment</code></li> <li>Gentoo Linux: Create a new file in <code>/etc/env.d</code> such as <code>/etc/env.d/99proxy</code></li> </ul> <p>On Windows, one configures the environment variables in the Advanced System Settings:</p> <ul> <li>Press Windows-Key + R, enter <code>sysdm.cpl ,3</code> (mind the space before the comma) and press Enter</li> <li>Click the Environment variables button</li> <li>In either of the fields (User variables or System variables), add the four variables</li> </ul>"},{"location":"configure_apps/#git","title":"Git","text":"<p>Git accepts the environment variables described earlier. There is no simple way to add a unique certificate to git's trust store (see this discussion), but it seems to correctly manage the <code>curl_ca_bundle</code> one (see previous chapter) so if you've done the previous steps you should be all set.</p> <p>Edit: apparently this is not true, you have to add a specific configuration option in one of your git configuration files:</p> <pre><code>[http]\n  sslCAInfo = &lt;path_to_ca_bundle.pem&gt;\n</code></pre> <p>Thanks, source!</p> <p>Not directly related to the Proxy but if your organization's firewall should block outgoing connections to TCP port 9418 (used by the git:// protocol) and some software automatically clones from those URLs without any method to change the URLs, you can tell git to use the HTTPS protocol instead of the faster GIT protocol by adding these lines to you git config file:</p> <pre><code>[url \"https://\"]\n    insteadOf = git://\n</code></pre> <p>The same goes equivalently for the SSH protocol on TCP port 22.</p>"},{"location":"configure_apps/#python","title":"Python","text":""},{"location":"configure_apps/#any-python-code","title":"Any python code","text":"<p>If you rely on the python <code>Requests</code> package for HTTP and HTTPs calls, all environment variables described earlier are supported. Concerning certificate trust, the package first looks at <code>requests_ca_bundle</code> environment variable for trusted certificates, and defaults to <code>curl_ca_bundle</code> if it is not defined.</p>"},{"location":"configure_apps/#conda-anaconda-python-distribution","title":"Conda (Anaconda Python distribution)","text":"<p>Conda accepts the environment variables described earlier. There is no simple way to add a unique certificate to its trust store, but it seems to correctly manage the <code>curl_ca_bundle</code> one (see previous chapter) so if you've done the previous steps you should be all set.</p>"},{"location":"configure_apps/#pip","title":"Pip","text":"<p>Depending on your version of pip you may either have</p> <ul> <li>nothing to do (same than <code>Requests</code> and <code>Conda</code>),</li> <li>or the following manual operation to perform to replace the trusted bundle of certificates: create a file under %APPDATA%/pip/pip.ini containing</li> </ul> <pre><code>[global]\ncert = &lt;path_to_ca_bundle.pem&gt;\n</code></pre>"},{"location":"configure_apps/#pycharm","title":"PyCharm","text":"<p>By default PyCharm relies on the python distribution (e.g. conda) to install the packages. Therefore if you configured conda, PyCharm will be able to download packages from the web.</p> <p>In addition, in order for PyCharm to be able to download its own updates, it needs to be configured under File &gt; Settings &gt; Appearance &amp; Behaviour &gt; System Settings &gt; HTTP Proxy:</p> <ul> <li>If possible, enable \"Auto-detect Proxy settings\" and possibly enter your automatic proxy configuration URL here.</li> <li>Otherwise, enable \"Manual Proxy Configuration\" .</li> </ul> <p>(Tested with Community Edition 2016.2.3:)</p> <p>You may then add the proxy's server certificate to the list of trusted servers, using Tools &gt; Server Certificates</p>"},{"location":"configure_apps/#matlab","title":"MATLAB","text":"<p>In MATLAB Settings (Home &gt; Preferences &gt; Web) you may configure the proxy host and port.</p> <p>Alternatively you may set it using a script:</p> <pre><code>com.mathworks.mlwidgets.html.HTMLPrefs.setUseProxy(true);\ncom.mathworks.mlwidgets.html.HTMLPrefs.setProxyHost('&lt;proxy_host&gt;');\ncom.mathworks.mlwidgets.html.HTMLPrefs.setProxyPort('&lt;proxy_port&gt;');\ncom.mathworks.mlwidgets.html.HTMLPrefs.setProxySettings();\n</code></pre> <p>There is a nice forum post here to help you trust an SSL certificate in Matlab's JRE : https://fr.mathworks.com/matlabcentral/answers/92506-how-can-i-configure-matlab-to-allow-access-to-self-signed-https-servers?requestedDomain=www.mathworks.com</p>"},{"location":"configure_apps/#r","title":"R","text":"<p>R provides several packages to perform http call (httr, Rcurl, curl). By default, the <code>http_proxy</code>, <code>https_proxy</code> environment variables seem to be taken into account quite well.</p> <p>Unfortunately, the R libraries don't seem to take into account the <code>curl_ca_bundle</code> environment variable. You may however trust a proxy by appending it's root certificate at the end of the following file : <code>&lt;R_HOME&gt;\\etc\\curl-ca-bundle.crt</code>.</p>"},{"location":"configure_apps/#net-based-applications","title":".Net-based applications","text":"<p>Most .Net-based applications rely on Internet Explorer proxy settings and Windows trusted certificates store. Therefore you simply have two steps to perform * in IE Settings, declare the proxy : <code>Internet Options &gt; Connections &gt; Network Settings</code> * on your windows desktop, trust the proxy's root certificate by right-clicking on the certificate, and selecting <code>install certificate</code></p> <p>You are then all set for most applications relying on the .Net framework..</p>"},{"location":"configure_apps/#java-based-applications","title":"Java-based applications","text":"<p>Each Java Virtual Machine (JVM) relies on a file named <code>cacerts</code> where the bundle of trusted certificated is held. This file is encrypted (as opposed to the one that we created for <code>curl_ca_bundle</code>) and its default password is <code>changeit</code>. You may first wish to change the password:</p> <pre><code>&gt; keytool -storepasswd -keystore \"%JAVA_HOME%/jre/lib/security/cacerts\"\n</code></pre> <p>And then add the trusted certificate:</p> <pre><code>&gt; keytool -keystore \"%JAVA_HOME%/jre/lib/security/cacerts\" -importcert -alias &lt;proxy_alias&gt; -file &lt;proxy_root_certificate.cer&gt;\n</code></pre> <p>Note: keytool ships with the JVM so if your JVM is on the system PATH it should be found.</p> <p>Several Java-based applications ship with their own dedicated JVM: MATLAB, Rapidminer, etc. Therefore they don't benefit from this modification, you'll have to redo it for each of them individually (or to copy/paste the above <code>cacerts</code> file onto the application's to replace it).</p> <p>Note that for MATLAB a specific more 'user-friendly' tool was provided by Mathworks, see corresponding chapter above.</p> <p>If you have any Java software or daemons/services running (for example the Gradle deamon used for Android development and which is automatically started) those will need to be killed and restarted before they start accepting the proxy's certificate.</p>"},{"location":"configure_apps/#web-browsers","title":"Web Browsers","text":"<p>Although browsers settings allow to modify the proxy more or less easily, there are useful plugins to switch even faster - typically between home and office.</p>"},{"location":"configure_apps/#firefox","title":"Firefox","text":"<ul> <li> <p>the excellent Proxy Switcher add-on will save you time! It supports automatic configuration scripts (<code>.pac</code>) as well as manual configuration too.</p> </li> <li> <p>in order to trust your proxy's root certificate, go to Advanced Settings &gt; Certificates &gt; View Certificates &gt; Authorities &gt; Import and import your proxy's root certificate here. Check the \"Trust for websites\" option, at least, and confirm.</p> </li> </ul>"},{"location":"configure_apps/#chrome","title":"Chrome","text":"<p>Chrome relies on the OS to get its proxy configuration. On windows this is similar to Internet Explorer, see below.</p>"},{"location":"configure_apps/#internet-explorer","title":"Internet Explorer","text":"<p>Internet Explorer relies on the Windows OS to get its proxy configuration. You may either choose a manual configuration or an automatic configuration script (<code>.pac</code>) in *Internet Options &gt; Connections &gt; Network Settings *</p> <p>In order to trust your proxy's root certificate, right click on your proxy's certificate file (not the bundle file) in the windows file explorer and select Install certificate.</p>"},{"location":"configure_apps/#openssl-based-applications-such-as-wget-and-curl","title":"OpenSSL-based applications (such as wget and curl)","text":"<p>OpenSSL uses a directory-based certificate store, usually in <code>/etc/ssl/certs</code> (but can vary, depending on your operating system / distribution and/or version of OpenSSL). To make OpenSSL-based applications accept your proxy's certificate, you need to copy the Base64-encoded crt file to that folder and create a symlink with a specific name to that file. That process is described at http://gagravarr.org/writing/openssl-certs/others.shtml#ca-openssl</p>"},{"location":"configure_apps/#apt-debian-linux-and-ubuntu-linux-packet-manager","title":"APT (Debian Linux and Ubuntu Linux packet manager)","text":"<p><code>apt</code> unfortunately  does not honor the environment variables mentioned in section a) and needs  the proxy configured in a dedicated configuration file. As root, create a new file named <code>/etc/apt/apt.conf.d/99proxy</code> and the following content:</p> <pre><code>Acquire::http::proxy \"http://proxy.company.com:80/\";\nAcquire::https::proxy \"https://proxy.company.com:80/\";\nAcquire::ftp::proxy \"ftp://proxy.company.com:80/\";\n</code></pre>"},{"location":"configure_apps/#nodejs-npm","title":"NodeJS / npm","text":"<p>npm honors the environment variables as described in section a). These should definitely be set even if you configure npm to use a proxy via npm's config file because any post-install hooks will NOT honor npm's config. If the environment variables are set, all post-install hooks should work properly. Certificate errors can be avoided by running <code>npm config set strict-ssl false</code>.</p>"},{"location":"configure_apps/#apache-cordova-projects-for-android-gradle-based-projects","title":"Apache cordova projects for Android / Gradle based projects","text":"<p>Gradle-based Android projects (and as such those created by Apache cordova) need to have the proxy server configured via a specific file called <code>gradle.properties</code> in the project's root folder. It should have the following content:</p> <pre><code>systemProp.http.proxyHost=proxy.company.com\nsystemProp.http.proxyPort=80\nsystemProp.https.proxyHost=proxy.company.com\nsystemProp.https.proxyPort=80\n</code></pre>"},{"location":"configure_apps/#pacman-paru","title":"Pacman &amp; paru","text":"<p>pacman respects the env vars, but you have to run it with sudo. As a solution you could <code>alias sudo='sudo -E'</code>, which will preserve your envvars in sudo.</p> <p>In paru (maybe also yay) you can set <code>--sudoflags '-E'</code> to achieve the same.</p>"},{"location":"configure_apps/#android-studio","title":"Android Studio","text":"<p>The proxy certificate needs to imported via the settings dialog: <code>Settings \u2192 Appereance &amp; Behavior \u2192 System Settings \u2192 HTTP Proxy and Settings \u2192 Tools \u2192 Server Certificates</code></p>"},{"location":"configure_apps/#android-sdk-manager-standalone-tool","title":"Android SDK Manager (standalone tool)","text":"<p>While the Android SDK downloads can be managed via the Android Studio, there is a standalone-tool for that task as well. If you still get certificate errors here, option the <code>Options</code> dialog and check the checkbox <code>Force https://... sources to be fetched using http://...</code></p>"},{"location":"configure_apps/#winhttp-service-used-for-windows-update-downloads","title":"WinHTTP service (used for Windows Update downloads)","text":"<p>Sometimes the WinHTTP service doesn't pick up the proxy configured via the Internet Options dialog. If your windows installation fails to download updates and takes very long before producing an error, try configuring the WinHTTP service manually as described at http://www.winplat.net/post/2012/04/06/Configure-Proxy-settings-for-WinHttp-on-Windows-2008-R2-and-Windows-7.aspx</p>"},{"location":"know_your_proxy/","title":"Know your proxy","text":"<p>Before configuring your computer applications to work with your proxy, you have to know which configuration settings to apply.</p>"},{"location":"know_your_proxy/#basics","title":"Basics","text":"<p>These can typically be obtained from your IT department:</p> <ul> <li>the proxy's host and port for the two protocols (HTTP and HTTPs). For example <code>http://proxyhost:8080</code> and <code>https://proxyhost:4443</code></li> <li>the list of hosts that do not require a proxy, in other words the hosts for which the applications should still use a direct connection. These are typically computers located in the intranet, but also some external hosts that have been put in a 'whitelist' by your IT department. For example <code>localhost,127.0.0.1,mylocalserver</code></li> <li>(optional) your credentials (username and password). Note that NTML proxies such as ZScaler do not require this - this is even dangerous in term of security to write your username and password in a file or an environment variable, so we don't recommend it</li> </ul>"},{"location":"know_your_proxy/#auto-configuration-scripts","title":"Auto-configuration scripts","text":"<p>Some tools are able to get their configuration with \"auto-config\" from a <code>.pac</code> script. If your organization provides such a script, make sure that you retrieve it.</p>"},{"location":"know_your_proxy/#advanced-proxies-that-modify-the-ssl-certification-chain","title":"Advanced: proxies that modify the SSL certification chain","text":"<p>Some proxies such as ZScaler modify the SSL certification chain by replacing the root Certification Authority (CA)'s certificate signature with their own CA certificate. </p> <p>In these cases, you will have to tell all your software applications to trust this new CA certificate. We will see below how to do that, but first let's check if you need it with your proxy.</p>"},{"location":"know_your_proxy/#check-if-your-proxy-needs-to-be-trusted","title":"Check if your proxy needs to be trusted","text":"<p>To check if your proxy changes the certification chain, here is the procedure on Firefox (but you can probably find equivalent possibilities in other browsers):</p> <ul> <li>connect to any https page such as https://google.com</li> <li>click on the small 'locker' icon at the left of the URL bar</li> <li>extend the popup. It should state \"secure connection, verified by <code>xxx</code>\":</li> </ul> <p></p> <ul> <li>if <code>xxx</code> has the name of your proxy (in this example, Zscaler) instead of being a known certification authority (such as DigiCert, Thawte, Verisign, Symantec, etc.), that means that your proxy has modified the certification chain. Otherwise, that means that either your proxy does not modify it, or bad luck : you picked a site that is in the whitelist :) select another https url and try again, to be sure. </li> </ul>"},{"location":"know_your_proxy/#download-your-proxys-root-certificate","title":"Download your proxy's root certificate","text":"<p>If the test was positive, you will need to download the proxy's CA certificate in order to be able to trust it. For this:</p> <ul> <li>Click on <code>More Information &gt; View Certificate &gt; Details</code>. </li> </ul> <p></p> <ul> <li>Select the ROOT certificate, at the top of the hierarchy - not the intermediate ones ! - and export it as a <code>*.crt</code> or <code>*.cer</code> file. If your browser asks you which certificate format is needed, select <code>base64</code>. This format is a string representation of the certificate's bytes, so you may open the file in Notepad and copy/paste the certificate easily if you need to.</li> </ul> <p>You now have a <code>my_proxys_root_ca_cert.cer</code> file. </p> <p>Note: <code>.cer</code>, <code>.crt</code> and <code>.pem</code> are both valid extensions for such a <code>base64</code> encoded file, see this article. They can be opened with a text editor if needed.</p>"},{"location":"know_your_proxy/#create-a-certificate-bundle-including-your-proxys-root-certificate","title":"Create a certificate bundle including your proxy's root certificate","text":"<p>As we'll see in the next session, some tools are able to support addition of trusted certificates one by one (= separate certificate files), while some others only support changing the whole trusted certificate bundle entirely (= a single file containing all trusted certificates). </p> <p>You will therefore need to build such a certificate bundle file. This is done by appending your proxy's root certificate (<code>my_proxys_root_ca_cert.cer</code>, downloaded in previous section) to an existing certificate bundle.</p> <ul> <li>Get an existing certificate bundle. For example you may wish to get it from certifi by downloading it from this adress: certs.pem. IMPORTANT please check that this link is still the link recommended by certifi.io! Downloading a compromised list of certificate authorities can enfringe your computer's (and IT dept) security rules, proceed with care and/or double-check with your IT department.</li> <li>save the file somewhere on your computer, and rename it for example <code>160117-certifi-ca-bundle-with-proxy.pem</code>. Make sure that only administrator account has write permissions on this file. This will prevent programs to add other trusted certificates later on.</li> <li>open it in your favorite text editor to edit it: at the end of the file, append your Proxy's certificate (the contents of the <code>my_proxys_root_ca_cert.cer</code> file downloaded in previous step). The bottom of the resulting certificate bundle file should therefore now look like this:</li> </ul> <pre><code>(... end of the certs.pem file provided by certifi)\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----\n\nMy Proxy's Root CA\n==================\n-----BEGIN CERTIFICATE-----\nMIAE07CCA7ugAwIBAgIJANu+mC2Jt3uTMA0GCSqGSIb3DQEBCwUAMIGhMQswCQYD\nVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIU2FuIEpvc2Ux\n(... this is fairly long)\nxFNjavxrHmsH8jPHVvgc1VD0Opja0l/BRVauTrUaoW6tE+wFG5rEcPGS80jjHK4S\npB5iDj2mUZH1T8lzYtuZy0ZPirxmtsk3135+CKNa2OCAhhFjE0xd\n-----END CERTIFICATE-----\n</code></pre> <p>You are now all set :</p> <ul> <li>You have a <code>my_proxys_root_ca_cert.crt</code> file containing your proxy's certificate only. This will be referred to as <code>&lt;path_to_root_ca_cert.crt&gt;</code> in next section</li> <li>You have a <code>160117-certifi-ca-bundle-with-proxy.pem</code> file containing a bundle of trusted certificates, as well as your proxy's. This will be referred to as <code>&lt;path_to_ca_bundle.pem&gt;</code> in next section</li> </ul> <p>(Remember that <code>.crt</code>, <code>.cer</code> and <code>.pem</code> are both valid extensions for these files)</p>"},{"location":"switching/","title":"Switching tools","text":"<p>If you find yourself switching frequently between proxy / non-proxy configurations, you might wish to use these tools.</p>"},{"location":"switching/#firefox-proxyswitcher","title":"Firefox ProxySwitcher","text":"<p>The excellent Proxy Switcher add-on will save you time! It supports automatic configuration scripts (<code>.pac</code>) as well as manual configuration too.</p> <p></p>"},{"location":"switching/#envswitcher","title":"Envswitcher","text":"<p>I created envswitch because I did not find anything like Firefox ProxySwitcher to switch the environment variables used by <code>curl</code>, <code>git</code>, <code>conda</code>, <code>pip</code> and many other tools.</p> <p>This is a general-purpose environment switcher, so you have to create an initial configuration file for your needs. You can use the following configuration file with two environments (no proxy / proxy) to get started.</p> <p></p>"}]}